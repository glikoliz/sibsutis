:- dynamic рейс/4.

меню :-
    writeln('1. Просмотр содержимого базы данных'),
    writeln('2. Добавление записи'),
    writeln('3. Удаление записи'),
    writeln('4. Выполнение запроса к базе данных'),
    writeln('5. Выход и сохранение базы данных'),
    read(Выбор),
    обработать_выбор(Выбор).

обработать_выбор(1) :-
    просмотр_базы,
    меню.
обработать_выбор(2) :-
    добавление_записи,
    меню.
обработать_выбор(3) :-
    удаление_записи,
    меню.
обработать_выбор(4) :-
    выполнить_запрос,
    меню.
обработать_выбор(5) :-
    сохранение_и_выход.

просмотр_базы :-
    рейс(НомерРейса, ПунктПрибытия, ВремяОтправления, Стоимость),
    writef('Рейс: %w, Пункт прибытия: %w, Время отправления: %w, Стоимость билета: %w', [НомерРейса, ПунктПрибытия, ВремяОтправления, Стоимость]),
    nl,
    fail.
просмотр_базы.


добавление_записи :-
    repeat,
    writeln('Введите номер рейса(отрицательный чтобы выйти):'),
    read(НомерРейса),
    (НомерРейса < 0 ->
        writeln('Выход из добавления записей'),
        меню
    ;
        writeln('Введите пункт прибытия:'),
        read(ПунктПрибытия),
        writeln('Введите время отправления:'),
        read(ВремяОтправления),
        writeln('Введите стоимость билета:'),
        read(Стоимость),
        assertz(рейс(НомерРейса, ПунктПрибытия, ВремяОтправления, Стоимость)),
        writeln('Запись добавлена успешно')
    ),
    fail.

удаление_записи :-
    repeat,
    writeln('Введите номер рейса для удаления(отрицательный чтобы выйти):'),
    read(НомерРейса),
    (НомерРейса < 0 ->
        writeln('Выход из удаления записей'),
        меню
    ;
        retract(рейс(НомерРейса, _, _, _)),
        writeln('Запись удалена успешно')
    ),
    fail.



выполнить_запрос :-
    writeln('Введите название города: '),
    read(Город),
    writeln('Введите текущее время: '),
    read(Введенное_время),
    время_в_минуты(Введенное_время, Новое_время),
    Время_плюс is Новое_время + 360,
    рейс(Новый_рейс, Город, Время, Стоимость),
    минимальная_стоимость(Город, Новое_время, Время_плюс, МинСтоимость),
    Стоимость == МинСтоимость,
    writef('Рейс: %w, Город: %w, Время отправления: %w, Стоимость билета: %w\n', [Новый_рейс, Город, Время, Стоимость]).
выполнить_запрос.

время_в_минуты(Строка, Минуты) :-
    split_string(Строка, ":", "", [ЧасыСтр, МинутыСтр]),
    number_string(Часы, ЧасыСтр),
    number_string(Рез, МинутыСтр),
    Минуты is Часы * 60 + Рез.


минимальная_стоимость(Город, НачалоДиапазона, КонецДиапазона, МинСтоимость) :-
    findall(Стоимость, (
        рейс(_, Город, Время, Стоимость),
        время_в_минуты(Время, Минуты),
        ВремяВМинутах is Минуты,
        (
            (ВремяВМинутах >= НачалоДиапазона, ВремяВМинутах =< КонецДиапазона)
            ;
            (ВремяВМинутах + 1440 >= НачалоДиапазона, ВремяВМинутах + 1440 =< КонецДиапазона)
        )
    ), Стоимости),
    min_list(Стоимости, МинСтоимость).


сохранение_и_выход :-
    tell('database.pl'),
    listing(рейс),
    told,
    writeln('База данных сохранена'),
    halt.
    
% Запуск программы
начать :-
    consult('database.pl'),
    меню.
